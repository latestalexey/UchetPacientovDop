// Функция читает данные графика работы из регистра.
Функция ПрочитатьДанныеГрафикаИзРегистра(Сотрудник, ПериодНач, ПериодКон) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.ДатаГрафика КАК ДатаГрафика,
	|	ГрафикиРаботыСотрудников.Смена
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|ГДЕ
	|	ГрафикиРаботыСотрудников.ДатаГрафика МЕЖДУ &ПериодНач И &ПериодКон
	|	И ГрафикиРаботыСотрудников.Сотрудник = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаГрафика";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	Запрос.УстановитьПараметр("ПериодНач",		ПериодНач);
	Запрос.УстановитьПараметр("ПериодКон",		ПериодКон);
	
	ДниВключенныеВГрафик = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДниВключенныеВГрафик.Вставить(Выборка.ДатаГрафика, Выборка.Смена);
	КонецЦикла;
	
	Возврат ДниВключенныеВГрафик;
	
КонецФункции

// Процедура записывает данные графика в регистр.
//
// Параметры:
//	ГрафикРаботы	- Ссылка на текущий элемент справочника.
//	НомерГода		- Номер года, за который необходимо записать график.
//	ДниВключенныеВГрафик - соответствие даты и данных к ней относящихся.
//
// Возвращаемое значение
//	Нет
//
Процедура ЗаписатьДанныеГрафикаВРегистр(Сотрудник, ДниВключенныеВГрафик, ДатаНачала, ДатаОкончания) Экспорт
	
	НаборДни = РегистрыСведений.ГрафикиРаботыСотрудников.СоздатьНаборЗаписей();
	НаборДни.Отбор.Сотрудник.Установить(Сотрудник);
	
	// Запись оптимальнее выполнять по годам.
	// Выбираем используемые годы
	// Для каждого года 
	// - считываем набор, 
	// - модифицируем его с учетом записываемых данных
	// - записываем.
	
	ДанныеПоГодам = Новый Соответствие;
	
	ДатаДня = ДатаНачала;
	Пока ДатаДня <= ДатаОкончания Цикл
		ДанныеПоГодам.Вставить(Год(ДатаДня), Истина);
		ДатаДня = ДатаДня + 86400;
	КонецЦикла;
	
	// Обрабатываем данные по годам.
	Для Каждого КлючИЗначение Из ДанныеПоГодам Цикл
		Год = КлючИЗначение.Ключ;
		
		// Считываем наборы на год
		//НаборДни.Отбор.Год.Установить(Год);
		НаборДни.Прочитать();
		
		// Заполняем содержимое набора в соответствие по датам для быстрого доступа.
		СтрокиНабораДни = Новый Соответствие;
		Для Каждого СтрокаНабора Из НаборДни Цикл
			СтрокиНабораДни.Вставить(СтрокаНабора.ДатаГрафика, СтрокаНабора);
		КонецЦикла;
		
		НачалоГода = Дата(Год, 1, 1);
		КонецГода = Дата(Год, 12, 31);
		
		НачалоОбхода = ?(ДатаНачала > НачалоГода, ДатаНачала, НачалоГода);
		КонецОбхода = ?(ДатаОкончания < КонецГода, ДатаОкончания, КонецГода);
		
		// Для периода обхода данные в наборе должны быть заменены.
		ДатаДня = НачалоОбхода;
		Пока ДатаДня <= КонецОбхода Цикл
			// Если строки на дату нет в наборе - создаем ее.
			СтрокаНабораДни = СтрокиНабораДни[ДатаДня];
			Если СтрокаНабораДни = Неопределено Тогда
				СтрокаНабораДни = НаборДни.Добавить();
				СтрокаНабораДни.Сотрудник = Сотрудник;
				СтрокаНабораДни.ДатаГрафика = ДатаДня;
				СтрокиНабораДни.Вставить(ДатаДня, СтрокаНабораДни);
			КонецЕсли;
			
			// Если день включен в график, то заполним его интервалы.
			ДанныеДня = ДниВключенныеВГрафик.Получить(ДатаДня);
			Если ДанныеДня = Неопределено Тогда
				// Удаляем строку из набора, если день - нерабочий.
				НаборДни.Удалить(СтрокаНабораДни);
				СтрокиНабораДни.Удалить(ДатаДня);
			Иначе
//				СтрокаНабораДни.ДеньВключенВГрафик = Истина;
			КонецЕсли;
			ДатаДня = ДатаДня + 86400;
		КонецЦикла;
		
		НаборДни.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

