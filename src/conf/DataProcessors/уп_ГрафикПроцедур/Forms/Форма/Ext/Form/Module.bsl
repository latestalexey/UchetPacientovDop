#Область Предопределенные

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	Если Справочники.Организации.КоличествоОрганизаций() = 1 Тогда
		Элементы.Организация.Видимость = Ложь;   
	КонецЕсли;	
	
	НачалоПериода = НачалоНедели(ТекущаяДата());
	КонецПериода = НачалоПериода + 6*24*60*60; 	
	
	СоздатьКолонкиПоПомещениям();
	ЗаполнитьТаблицуГрафика();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПоказатьПериод(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		ОбновитьДанныеВРегистре();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры

#КонецОбласти

#Область Служебные
&НаСервере
Процедура ЗаполнитьТаблицуГрафика() 	
	ЗаполнитьСтрокиПоГрафику();  	
	ЗаполнитьДаннымиСРегистра();
КонецПроцедуры

&НаСервере
Процедура СоздатьКолонкиПоПомещениям()
	СписокПомещений = Справочники.Помещения.ПолучитьСписокАктивныхПомещений();
	МассивРеквизитов = Новый Массив;
	
	КС = Новый КвалификаторыСтроки(250);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);

	Для Каждого Помещение Из СписокПомещений Цикл
		РеквизитФормы = Новый РеквизитФормы("к"+Помещение.Код, ОписаниеТиповС, "График", Помещение.Наименование);
		МассивРеквизитов.Добавить(РеквизитФормы);
		
		НС = ПомещениеИКод.Добавить();
		НС.Помещение = Помещение.Ссылка;
		НС.Код = Помещение.Код;
	КонецЦикла;
	ИзменитьРеквизиты(МассивРеквизитов);
	
	Для Каждого Помещение Из СписокПомещений Цикл 
      Элемент = Элементы.Добавить("к"+Помещение.Код, Тип("ПолеФормы"), Элементы.График); 
      Элемент.Вид = ВидПоляФормы.ПолеВвода;
      Элемент.ПутьКДанным = "График." + "к"+Помещение.Код;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиПоГрафику()
	МассивГрафиков = Новый Массив;
	МассивГрафиков.Добавить(Объект.Организация.ГрафикРаботы);
	ДниРаботы = ГрафикиРаботы.РасписанияРаботыНаПериод(МассивГрафиков, НачалоПериода, КонецПериода);
	ДниРаботы.Сортировать("ДатаГрафика, ВремяНачала");
	ТекущийДень = Дата("00010101");
	//График.Очистить();
	МаксимальнаяГраница = График.Количество()-1;
	Счетчик = 0;
	Для Каждого Строка Из ДниРаботы Цикл
		Если Строка.ДатаГрафика <> ТекущийДень Тогда
			Если Счетчик > МаксимальнаяГраница Тогда
				НС = График.Добавить();
			Иначе
				НС = График[Счетчик];
			КонецЕсли;
			Счетчик = Счетчик + 1;
			НС.Время = Формат(Строка.ДатаГрафика, "ДФ='d MMMM, dddd'");
			ТекущийДень = Строка.ДатаГрафика;
		КонецЕсли;
		Если Счетчик > МаксимальнаяГраница Тогда
			НС = График.Добавить();
		Иначе
			НС = График[Счетчик];
		КонецЕсли;
		Счетчик = Счетчик + 1;
		НС.Время = "" + Формат(Строка.ВремяНачала, "ДФ=ЧЧ:мм") + " - " + Формат(Строка.ВремяОкончания, "ДФ=ЧЧ:мм");
		НС.ВремяСкр = Дата(Год(Строка.ДатаГрафика), Месяц(Строка.ДатаГрафика), День(Строка.ДатаГрафика), Час(Строка.ВремяНачала), Минута(СТрока.ВремяНачала), Секунда(Строка.ВремяНачала));
	КонецЦикла;
	Пока Счетчик < МаксимальнаяГраница Цикл
		График.Удалить(Счетчик);
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВРегистре()
	
	ДеньПериода = НачалоПериода;
	Пока ДеньПериода <= КонецПериода Цикл
		НаборЗаписей = РегистрыСведений.уп_ГрафикРаботы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Значение = ДеньПериода;
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		ДеньПериода = ДеньПериода + 24*60*60;
	КонецЦикла;
	
	НаборЗаписей.Отбор.Период.Использование = Ложь;
	Для Каждого Строка Из Объект.Процедуры Цикл
		НС = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строка);
		НС.Период = Строка.ВремяНачала;
		НС.ВремяОкончания = Строка.ВремяНачала + Строка.Процедура.Длительность*60;
		НС.Состояние = Строка.ТипЗаполнения;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикФормы()
	Для Каждого Строка Из График Цикл
		Для Каждого Помещение из ПомещениеИКод Цикл
			Строка["к"+Помещение.Код] = "";
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	Для Каждого СтрокаДанных Из Объект.Процедуры Цикл
		ПараметрыОтбора.Вставить("ВремяСкр", СтрокаДанных.ВремяНачала);
		НайденныеСтроки = График.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаГрафика Из НайденныеСтроки Цикл
			СтрокаГрафика["к"+СтрокаДанных.Помещение.Код] = "" + ?(ЗначениеЗаполнено(СтрокаГрафика["к"+СтрокаДанных.Помещение.Код]),СтрокаГрафика["к"+СтрокаДанных.Помещение.Код] + Символы.ПС, "")
				+ СтрокаДанных.Сотрудник + " / " + СтрокаДанных.Клиент + " / " + СтрокаДанных.Процедура;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиСРегистра()
	Объект.Процедуры.Загрузить(РегистрыСведений.уп_ГрафикРаботы.ПолучитьДанныеЗаПериод(НачалоПериода, КонецДня(КонецПериода)));
	ЗаполнитьГрафикФормы();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПроцедур(ПараметрыСписка)
	СписокПроцедур = Новый Массив;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВремяНачала", ПараметрыСписка.ВремяНачала);
	СтруктураПоиска.Вставить("Помещение", ПараметрыСписка.Помещение);
	Массив = Объект.Процедуры.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаПоиска Из Массив Цикл
		СписокПроцедур.Добавить(Новый Структура ("Помещение, Сотрудник, Клиент, Процедура", СтрокаПоиска.Помещение, СтрокаПоиска.Сотрудник, СтрокаПоиска.Клиент, СтрокаПоиска.Процедура));
	КонецЦикла;
	
	Возврат СписокПроцедур;
КонецФункции

&НаКлиенте
Функция ПолучитьПомещениеПоКоду(Код)
	СтрПоиска = Новый Структура("Код", Сред(Код, 2));
	МассивПомещений = ПомещениеИКод.НайтиСтроки(СтрПоиска);
	Если МассивПомещений.Количество() > 0 Тогда
		Пом = МассивПомещений[0].Помещение;
	Иначе
		Пом = Неопределено;
	КонецЕсли;
	Возврат Пом;
КонецФункции

&НаКлиенте
Процедура ГрафикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КодПомещения", Сред(Поле.Имя, 2));
	ПараметрыФормы.Вставить("ВремяНачала", Элемент.ТекущиеДанные.ВремяСкр);
	ПараметрыФормы.Вставить("Помещение", ПолучитьПомещениеПоКоду(Поле.Имя));
	
	
	ПараметрыФормы.Вставить("Список", ПолучитьСписокПроцедур(ПараметрыФормы));
	
	
	ОткрытьФорму("Обработка.уп_ГрафикПроцедур.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПереместитьПроцедуру (ВремяС, ПомещениеС, ВремяНа, ПомещениеНа)
	СтрПоиска = Новый Структура;
	СтрПоиска.Вставить("ВремяНачала", ВремяС);
	СтрПоиска.Вставить("Помещение", ПомещениеС);
	МассивПоиска = Объект.Процедуры.НайтиСтроки(СтрПоиска);
	Для Каждого Строка Из МассивПоиска Цикл
		Строка.ВремяНачала = ВремяНа;
		Строка.Помещение = ПомещениеНа;
	КонецЦикла;
	
	ОбновитьДанныеВРегистре();
	ЗаполнитьТаблицуГрафика();
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафик(МассивДанных)
	СтрПоиска = Новый Структура;
	Для Каждого Строка Из МассивДанных Цикл
		СтрПоиска.Вставить("ВремяНачала", Строка.ВремяНачала);
		СтрПоиска.Вставить("Помещение", Строка.Помещение);
		НайденныеСтроки = Объект.Процедуры.НайтиСтроки(СтрПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.Процедуры.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Строка Из МассивДанных Цикл
		НС = Объект.Процедуры.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строка, "ВремяНачала, Процедура, Помещение, Сотрудник, Клиент");
		НС.ТипЗаполнения = Перечисления.уп_СостоянияГрафика.Ручной;
	КонецЦикла;
	
	ОбновитьДанныеВРегистре();
	ЗаполнитьТаблицуГрафика();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.уп_ГрафикПроцедур.Форма.ФормаЭлемента") Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ОбновитьГрафик(ВыбранноеЗначение.Расписание);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	СтрПоиска = Новый Структура;
	СтрПоиска.Вставить("ВремяНачала", Элементы.График.ТекущиеДанные.ВремяСкр);
	СтрПоиска.Вставить("Помещение", ПолучитьПомещениеПоКоду(Элементы.График.ТекущийЭлемент.Имя));
	МассивДанных = Объект.Процедуры.НайтиСтроки(СтрПоиска);
	Для Каждого Элемент Из МассивДанных Цикл
		Объект.Процедуры.Удалить(Элемент);
	КонецЦикла;

	ОбновитьДанныеВРегистре();
	ЗаполнитьТаблицуГрафика();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ОбновитьДанныеВРегистре();
КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьПериод(Форма)
	Форма.мНадписьПериод = ПредставлениеПериода(НачалоДня(Форма.НачалоПериода), КонецДня(Форма.КонецПериода), "ФП = Истина" );
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПериод(Форма, Шаг)
	
	Форма.НачалоПериода  = НачалоДня(Форма.НачалоПериода) + Шаг * 60*60*24*7; 
	Форма.КонецПериода = НачалоДня(Форма.НачалоПериода) + 60*60*24*6;
		
	ПоказатьПериод(Форма);
КонецПроцедуры // ИзменитьПериод()


&НаКлиенте
Процедура УстановитьПредыдущийПериод(Команда)
	ИзменитьПериод(ЭтаФорма, -1);
	ЗаполнитьТаблицуГрафика();
КонецПроцедуры


&НаКлиенте                                                                                       

Процедура УстановитьСледующийПериод(Команда)
	ИзменитьПериод(ЭтаФорма, 1);
	ЗаполнитьТаблицуГрафика();
КонецПроцедуры


&НаКлиенте
Процедура ГрафикНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	мКодКолонкиПеретаскивания = Элемент.ТекущийЭлемент.Имя;
	мВремяПеретаскивания = Элемент.ТекущиеДанные.ВремяСкр;
	Выполнение = Истина;
КонецПроцедуры                                                                               


&НаКлиенте
Процедура ГрафикОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ГрафикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = ложь;
	ПереместитьПроцедуру(мВремяПеретаскивания, ПолучитьПомещениеПоКоду(мКодКолонкиПеретаскивания), График.НайтиПоИдентификатору(Строка).ВремяСкр, ПолучитьПомещениеПоКоду(Поле.Имя));
КонецПроцедуры


&НаКлиенте
Процедура ГрафикПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.             
	Если Не ЗначениеЗаполнено(График.НайтиПоИдентификатору(Строка).ВремяСкр) ИЛИ (Поле.Имя = "ГрафикВремя") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
