#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЭтотОбъект.Состояние = Перечисления.уп_СостоянияНазначений.Ручная;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	//TODO: Продумать проверку заполнения для пар Кабинет и Процедура, Процедура и Сотрудник и т.д.
	
	//Если ТипЗаписи = Перечисления.ТипыПредварительнойЗаписи.ЗаписьКлиента Тогда
	//	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВидПрочейЗаписи"));		
	//Иначе		
	//	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Клиент"));
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Сотрудник) Тогда 
	//	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Кабинет"));	
	//ИначеЕсли ЗначениеЗаполнено(Кабинет) Тогда 
	//	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Сотрудник"));	
	//КонецЕсли;
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//TODO: Написать обработчик проведения документа
	
	// регистр уп_ГрафикРаботы
	Движения.уп_ГрафикРаботы.Записывать = Истина;
	Движение = Движения.уп_ГрафикРаботы.Добавить();
	Движение.Период 			= Дата;
	Движение.Сотрудник 			= Сотрудник;
	Движение.Клиент 			= Клиент;
	Движение.Помещение 			= Помещение;
	Движение.ВремяНачала 		= ВремяНачала;
	Движение.Назначение			= Назначение;	
	Движение.ВремяОкончания 	= ВремяОкончания;
	Движение.Состояние			= Состояние;
	
	Если ЗначениеЗаполнено(Клиент) И ЗначениеЗаполнено(Назначение) И (Состояние <> Перечисления.уп_СостоянияНазначений.Неявка) Тогда
		Движения.ОстаткиПроцедур.Записывать = Истина;
		Движение = Движения.ОстаткиПроцедур.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Клиент = Клиент;
		Движение.Процедура = Назначение;
		Движение.Период = Дата;
		Движение.Состояние = Состояние;
		Движение.Количество = 1;
		
		Движение = Движения.ОстаткиПроцедур.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Клиент = Клиент;
		Движение.Процедура = Назначение;
		Движение.Период = Дата;
		Движение.Состояние = Перечисления.уп_СостоянияНазначений.Нераспределенная;
		Движение.Количество = 1;
		
		Движения.ОстаткиПроцедур.Записать(Истина);
		
		Фильтр = Новый Структура("Клиент, Процедура, Состояние", Клиент, Назначение, Перечисления.уп_СостоянияНазначений.Нераспределенная);
				
		Остатки = РегистрыНакопления.ОстаткиПроцедур.Остатки(,Фильтр, ,"Количество");
		Если Остатки.Количество() > 0 Тогда
			Отказ = Остатки[0].Количество < 0;
		КонецЕсли;
		Если Не Отказ Тогда
			Граница = Новый Граница(Дата, ВидГраницы.Включая);
			Остатки = РегистрыНакопления.ОстаткиПроцедур.Остатки(Граница,Фильтр, ,"Количество");
			Если Остатки.Количество() > 0 Тогда
				Отказ = Остатки[0].Количество < 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Движения.ОстаткиПроцедур.Очистить();
		Движения.ОстаткиПроцедур.Записать();
	КонецЕсли;        

КонецПроцедуры

#КонецОбласти

#КонецЕсли